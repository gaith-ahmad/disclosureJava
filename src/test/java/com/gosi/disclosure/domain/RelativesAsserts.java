package com.gosi.disclosure.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RelativesAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRelativesAllPropertiesEquals(Relatives expected, Relatives actual) {
        assertRelativesAutoGeneratedPropertiesEquals(expected, actual);
        assertRelativesAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRelativesAllUpdatablePropertiesEquals(Relatives expected, Relatives actual) {
        assertRelativesUpdatableFieldsEquals(expected, actual);
        assertRelativesUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRelativesAutoGeneratedPropertiesEquals(Relatives expected, Relatives actual) {
        assertThat(actual)
            .as("Verify Relatives auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRelativesUpdatableFieldsEquals(Relatives expected, Relatives actual) {
        assertThat(actual)
            .as("Verify Relatives relevant properties")
            .satisfies(a -> assertThat(a.getNameDiscloser()).as("check nameDiscloser").isEqualTo(expected.getNameDiscloser()))
            .satisfies(a -> assertThat(a.getNameRelative()).as("check nameRelative").isEqualTo(expected.getNameRelative()))
            .satisfies(a -> assertThat(a.getJobTitleRelative()).as("check jobTitleRelative").isEqualTo(expected.getJobTitleRelative()))
            .satisfies(a -> assertThat(a.getRelativeJobNumber()).as("check relativeJobNumber").isEqualTo(expected.getRelativeJobNumber()))
            .satisfies(a -> assertThat(a.getEmailRelative()).as("check emailRelative").isEqualTo(expected.getEmailRelative()))
            .satisfies(a ->
                assertThat(a.getRelativeExtensionNumber())
                    .as("check relativeExtensionNumber")
                    .isEqualTo(expected.getRelativeExtensionNumber())
            )
            .satisfies(a ->
                assertThat(a.getRelativeRelationship()).as("check relativeRelationship").isEqualTo(expected.getRelativeRelationship())
            )
            .satisfies(a ->
                assertThat(a.getGeneralAdministrationRelative())
                    .as("check generalAdministrationRelative")
                    .isEqualTo(expected.getGeneralAdministrationRelative())
            )
            .satisfies(a ->
                assertThat(a.getAdministrationRelative()).as("check administrationRelative").isEqualTo(expected.getAdministrationRelative())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRelativesUpdatableRelationshipsEquals(Relatives expected, Relatives actual) {
        assertThat(actual)
            .as("Verify Relatives relationships")
            .satisfies(a -> assertThat(a.getDisclosure()).as("check disclosure").isEqualTo(expected.getDisclosure()));
    }
}
