package com.gosi.disclosure.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class UserInfoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserInfoAllPropertiesEquals(UserInfo expected, UserInfo actual) {
        assertUserInfoAutoGeneratedPropertiesEquals(expected, actual);
        assertUserInfoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserInfoAllUpdatablePropertiesEquals(UserInfo expected, UserInfo actual) {
        assertUserInfoUpdatableFieldsEquals(expected, actual);
        assertUserInfoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserInfoAutoGeneratedPropertiesEquals(UserInfo expected, UserInfo actual) {
        assertThat(actual)
            .as("Verify UserInfo auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserInfoUpdatableFieldsEquals(UserInfo expected, UserInfo actual) {
        assertThat(actual)
            .as("Verify UserInfo relevant properties")
            .satisfies(a -> assertThat(a.getLoginName()).as("check loginName").isEqualTo(expected.getLoginName()))
            .satisfies(a -> assertThat(a.getFullName()).as("check fullName").isEqualTo(expected.getFullName()))
            .satisfies(a -> assertThat(a.getEmail()).as("check email").isEqualTo(expected.getEmail()))
            .satisfies(a -> assertThat(a.getKey()).as("check key").isEqualTo(expected.getKey()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getJobTitle()).as("check jobTitle").isEqualTo(expected.getJobTitle()))
            .satisfies(a -> assertThat(a.getJobNumber()).as("check jobNumber").isEqualTo(expected.getJobNumber()))
            .satisfies(a -> assertThat(a.getExt()).as("check ext").isEqualTo(expected.getExt()))
            .satisfies(a ->
                assertThat(a.getPublicAdministration()).as("check publicAdministration").isEqualTo(expected.getPublicAdministration())
            )
            .satisfies(a -> assertThat(a.getAdministration()).as("check administration").isEqualTo(expected.getAdministration()))
            .satisfies(a ->
                assertThat(a.getRelativeRelationship()).as("check relativeRelationship").isEqualTo(expected.getRelativeRelationship())
            )
            .satisfies(a -> assertThat(a.getOffice()).as("check office").isEqualTo(expected.getOffice()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserInfoUpdatableRelationshipsEquals(UserInfo expected, UserInfo actual) {
        assertThat(actual)
            .as("Verify UserInfo relationships")
            .satisfies(a -> assertThat(a.getManagerinfo()).as("check managerinfo").isEqualTo(expected.getManagerinfo()));
    }
}
