package com.gosi.disclosure.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ManagerInfoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertManagerInfoAllPropertiesEquals(ManagerInfo expected, ManagerInfo actual) {
        assertManagerInfoAutoGeneratedPropertiesEquals(expected, actual);
        assertManagerInfoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertManagerInfoAllUpdatablePropertiesEquals(ManagerInfo expected, ManagerInfo actual) {
        assertManagerInfoUpdatableFieldsEquals(expected, actual);
        assertManagerInfoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertManagerInfoAutoGeneratedPropertiesEquals(ManagerInfo expected, ManagerInfo actual) {
        assertThat(actual)
            .as("Verify ManagerInfo auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertManagerInfoUpdatableFieldsEquals(ManagerInfo expected, ManagerInfo actual) {
        assertThat(actual)
            .as("Verify ManagerInfo relevant properties")
            .satisfies(a -> assertThat(a.getEmailDirectManager()).as("check emailDirectManager").isEqualTo(expected.getEmailDirectManager())
            )
            .satisfies(a -> assertThat(a.getNameDirectManager()).as("check nameDirectManager").isEqualTo(expected.getNameDirectManager()))
            .satisfies(a ->
                assertThat(a.getJobNumberDirectManager()).as("check jobNumberDirectManager").isEqualTo(expected.getJobNumberDirectManager())
            )
            .satisfies(a ->
                assertThat(a.getJobTitleDirectManager()).as("check jobTitleDirectManager").isEqualTo(expected.getJobTitleDirectManager())
            )
            .satisfies(a -> assertThat(a.getExtDirectManager()).as("check extDirectManager").isEqualTo(expected.getExtDirectManager()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertManagerInfoUpdatableRelationshipsEquals(ManagerInfo expected, ManagerInfo actual) {
        // empty method
    }
}
