package com.gosi.disclosure.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DisclosureAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDisclosureAllPropertiesEquals(Disclosure expected, Disclosure actual) {
        assertDisclosureAutoGeneratedPropertiesEquals(expected, actual);
        assertDisclosureAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDisclosureAllUpdatablePropertiesEquals(Disclosure expected, Disclosure actual) {
        assertDisclosureUpdatableFieldsEquals(expected, actual);
        assertDisclosureUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDisclosureAutoGeneratedPropertiesEquals(Disclosure expected, Disclosure actual) {
        assertThat(actual)
            .as("Verify Disclosure auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDisclosureUpdatableFieldsEquals(Disclosure expected, Disclosure actual) {
        assertThat(actual)
            .as("Verify Disclosure relevant properties")
            .satisfies(a ->
                assertThat(a.getPurposeOfDisclosure()).as("check purposeOfDisclosure").isEqualTo(expected.getPurposeOfDisclosure())
            )
            .satisfies(a -> assertThat(a.getCreationDate()).as("check creationDate").isEqualTo(expected.getCreationDate()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getJobTitle()).as("check jobTitle").isEqualTo(expected.getJobTitle()))
            .satisfies(a -> assertThat(a.getJobNumber()).as("check jobNumber").isEqualTo(expected.getJobNumber()))
            .satisfies(a -> assertThat(a.getExt()).as("check ext").isEqualTo(expected.getExt()))
            .satisfies(a ->
                assertThat(a.getPublicAdministration()).as("check publicAdministration").isEqualTo(expected.getPublicAdministration())
            )
            .satisfies(a -> assertThat(a.getAdministration()).as("check administration").isEqualTo(expected.getAdministration()))
            .satisfies(a -> assertThat(a.getConfirm()).as("check confirm").isEqualTo(expected.getConfirm()))
            .satisfies(a -> assertThat(a.getEmail()).as("check email").isEqualTo(expected.getEmail()))
            .satisfies(a -> assertThat(a.getEmailDirectManager()).as("check emailDirectManager").isEqualTo(expected.getEmailDirectManager())
            )
            .satisfies(a -> assertThat(a.getNameDirectManager()).as("check nameDirectManager").isEqualTo(expected.getNameDirectManager()))
            .satisfies(a ->
                assertThat(a.getJobNumberDirectManager()).as("check jobNumberDirectManager").isEqualTo(expected.getJobNumberDirectManager())
            )
            .satisfies(a ->
                assertThat(a.getJobTitleDirectManager()).as("check jobTitleDirectManager").isEqualTo(expected.getJobTitleDirectManager())
            )
            .satisfies(a -> assertThat(a.getExtDirectManager()).as("check extDirectManager").isEqualTo(expected.getExtDirectManager()))
            .satisfies(a -> assertThat(a.getAreThereRelatives()).as("check areThereRelatives").isEqualTo(expected.getAreThereRelatives()))
            .satisfies(a -> assertThat(a.getFile()).as("check file").isEqualTo(expected.getFile()))
            .satisfies(a -> assertThat(a.getFilename()).as("check filename").isEqualTo(expected.getFilename()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDisclosureUpdatableRelationshipsEquals(Disclosure expected, Disclosure actual) {
        assertThat(actual)
            .as("Verify Disclosure relationships")
            .satisfies(a -> assertThat(a.getGift()).as("check gift").isEqualTo(expected.getGift()))
            .satisfies(a -> assertThat(a.getConflictInterest()).as("check conflictInterest").isEqualTo(expected.getConflictInterest()));
    }
}
